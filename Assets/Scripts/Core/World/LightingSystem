/****************************************************
 *  LightingSystem.cs – coloured lights + darkness
 *  -------------------------------------------------
 *  • This component is added to, and initialised by,
 *    WorldTilemapViewer.  Do **NOT** call Awake().
 *  • Call Initialize(WorldTilemapViewer) exactly once.
 *  • Call SetCamera(Camera) whenever the active camera
 *    changes (viewer does this for you).
 ****************************************************/

using System.Collections.Generic;
using UnityEngine;

[DisallowMultipleComponent]
public sealed class LightingSystem : MonoBehaviour
{
    /* ───────── inspector ───────── */

    [Tooltip("Number of chunks around the camera to keep lit.")]
    public Vector2Int viewDistance = new(4, 3);

    /* ───────── injected refs ───────── */
    WorldTilemapViewer viewer;     // set by Initialize()
    World              world;      // lazy-cached
    Camera             cam;        // can be swapped

    /* ───────── renderers & buffers ───────── */
    SpriteRenderer darknessSR;     // α-mask (multiplies scene)
    SpriteRenderer lightSR;        // RGB add-blend

    Texture2D darknessTex;
    Texture2D lightTex;
    Color[]   darknessPixels;
    Color[]   lightPixels;

    /* ───────── state ───────── */
    readonly HashSet<Vector2Int> litChunks = new();
    bool textureDirty;

    /* ===================================================================
     *  External single-entry initialiser
     * =================================================================*/
    public void Initialize(WorldTilemapViewer v)
    {
        viewer = v;
        world  = viewer.worldManager?.GetCurrentWorld();
        cam    = viewer.ViewCamera ?? Camera.main;

        if (!viewer)
        {
            Debug.LogError("[LightingSystem] Initialise failed – viewer null.");
            enabled = false;
            return;
        }

        CreateRenderers();
        textureDirty = true;       // force first build
    }

    /* Allow runtime camera swaps */
    public void SetCamera(Camera c) => cam = c;

    /* ===================================================================
     *  Main update – executed *after* viewer renders
     * =================================================================*/
    void LateUpdate()
    {
        if (!viewer || !cam) return;

        world ??= viewer.worldManager?.GetCurrentWorld();
        if (world == null) return;

        int cs = world.chunkSize;
        if (cs <= 0) return;

        /* ---------- build lit-chunk rectangle ---------- */
        Vector3 cpos = cam.transform.position;
        int cx0 = Mathf.FloorToInt(cpos.x / cs);
        int cy0 = Mathf.FloorToInt(cpos.y / cs);

        var current = new HashSet<Vector2Int>();
        for (int cy = cy0 - viewDistance.y; cy <= cy0 + viewDistance.y; ++cy)
        for (int cx = cx0 - viewDistance.x; cx <= cx0 + viewDistance.x; ++cx)
        {
            var ck = new Vector2Int(cx, cy);
            if (viewer.ChunkIsVisible(ck)) current.Add(ck);
        }

        if (!current.SetEquals(litChunks))
        {
            litChunks.Clear();
            litChunks.UnionWith(current);
            textureDirty = true;
        }

        if (!textureDirty) return;
        textureDirty = false;

        if (litChunks.Count == 0) ClearMasks();
        else                      RebuildMasks();
    }

    /* ===================================================================
     *  Renderer / texture creation
     * =================================================================*/
    void CreateRenderers()
    {
        /* darkness overlay ------------------------------------------------*/
        var darkGO = new GameObject("DarknessRenderer");
        darkGO.transform.SetParent(transform, false);
        darknessSR              = darkGO.AddComponent<SpriteRenderer>();
        darknessSR.sortingOrder = 30;
        darknessSR.sharedMaterial =
            new Material(Shader.Find("Custom/Lighting/DarknessMask"));

        /* additive coloured lights ----------------------------------------*/
        var lightGO = new GameObject("LightRenderer");
        lightGO.transform.SetParent(transform, false);
        lightSR              = lightGO.AddComponent<SpriteRenderer>();
        lightSR.sortingOrder = 31;
        lightSR.sharedMaterial =
            new Material(Shader.Find("Custom/Lighting/AdditiveLight"));
    }

    /* ===================================================================
     *  Mask management
     * =================================================================*/
    void ClearMasks()
    {
        darknessSR.sprite = null;
        lightSR.sprite    = null;

        if (darknessTex) Destroy(darknessTex);
        if (lightTex)    Destroy(lightTex);

        darknessTex = lightTex = null;
        darknessPixels = lightPixels = null;
    }

    void RebuildMasks()
    {
        if (!viewer.GetBounds(litChunks, out var min, out var max))
        { ClearMasks(); return; }

        int w = max.x - min.x;
        int h = max.y - min.y;
        if (w <= 0 || h <= 0) { ClearMasks(); return; }

        EnsureTextures(w, h);

        /* ----------- gather light emitters ------------------------------*/
        Color[] light = new Color[w * h];
        var q = new Queue<(Vector2Int pos, Color energy)>();

        viewer.CollectChunkLights(litChunks, min, max, ref light, q);

        while (q.Count > 0)
        {
            var (p, c) = q.Dequeue();
            int idx = p.y * w + p.x;
            if (c.maxColorComponent < light[idx].maxColorComponent) continue;

            foreach (var n in Neigh4(p))
            {
                if (n.x < 0 || n.y < 0 || n.x >= w || n.y >= h) continue;

                float fall = 1f - viewer.GetTileFalloff(n.x + min.x, n.y + min.y);
                Color nxt  = c * fall;

                int ni = n.y * w + n.x;
                if (nxt.maxColorComponent > light[ni].maxColorComponent)
                {
                    light[ni] = nxt;
                    if (nxt.maxColorComponent > 0.02f)
                        q.Enqueue((n, nxt));
                }
            }
        }

        /* ----------- compose texels ------------------------------------*/
        for (int i = 0; i < light.Length; ++i)
        {
            float bright = Mathf.Clamp01(light[i].maxColorComponent);
            darknessPixels[i] = new Color(0, 0, 0, 1f - bright);
            lightPixels[i]    = light[i];
        }

        darknessTex.SetPixels(darknessPixels); darknessTex.Apply();
        lightTex    .SetPixels(lightPixels);    lightTex.Apply();

        Vector3 pos = new(min.x - 0.5f, min.y - 0.5f, 0);
        darknessSR.transform.position = pos;
        lightSR    .transform.position = pos;
    }

    void EnsureTextures(int w, int h)
    {
        if (darknessTex && darknessTex.width == w && darknessTex.height == h) return;

        if (darknessTex) Destroy(darknessTex);
        if (lightTex)    Destroy(lightTex);

        darknessTex    = new Texture2D(w, h, TextureFormat.RGBA32, false);
        lightTex       = new Texture2D(w, h, TextureFormat.RGBA32, false);
        darknessPixels = new Color[w * h];
        lightPixels    = new Color[w * h];

        darknessSR.sprite = Sprite.Create(darknessTex,
                              new Rect(0, 0, w, h), Vector2.zero, 1f);
        lightSR.sprite    = Sprite.Create(lightTex,
                              new Rect(0, 0, w, h), Vector2.zero, 1f);
    }

    /* ===================================================================
     *  Misc helpers
     * =================================================================*/
    static IEnumerable<Vector2Int> Neigh4(Vector2Int p)
    {
        yield return new Vector2Int(p.x + 1, p.y);
        yield return new Vector2Int(p.x - 1, p.y);
        yield return new Vector2Int(p.x,     p.y + 1);
        yield return new Vector2Int(p.x,     p.y - 1);
    }

    /// <summary>Ask viewer to rebuild masks on next frame.</summary>
    public void InvalidateLighting() => textureDirty = true;
}
